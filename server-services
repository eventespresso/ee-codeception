#!/usr/bin/env bash
## Code inspired/copied from https://github.com/cubny/php-built-in-server-manager

## get some environment variables if they haven't been set yet.
if [ -z $WP_PATH ]; then
    ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    WP_PATH=${ROOT}/tests/tmp/wp
fi

## Create the wp directory if it doesn't exist for the webserver to point to.
if [ ! -d $WP_PATH ]; then
    mkdir $WP_PATH;
fi

# default hostname
HOST=127.0.0.1
# default port number
PORT=8888
#PATH TO POINT TO

# script name
NAME=${0##*/}

usage() {
  cat <<EOF
  $NAME (PHP built-in web server manager) Version 0.1.0
  PHP builtin server manager on port $PORT
  usage: ./$NAME <command> [<hostname>:<port>]
  Available commands:
  start     Starts PHP built-in web server server on specified hostname:port, default is localhost:$PORT
  stop      Stops the PHP built-in web server
  restart   Stops and Starts on previously specified hostname:port
  status    Status of "$NAME" process
EOF
return 0
}

setup_colors() {

if which tput >/dev/null 2>&1; then
      ncolors=$(tput colors)
  fi
  if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
  else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    BOLD=""
    NORMAL=""
  fi
}

# if no command specified exit and show usage
if [[ $# < 1 ]]; then
  echo $NAME: no command specified
  usage
  exit 1
fi

# pidfile contents would be hostname:port:pid
PIDFILE="$NAME".pid
PHANTOMPIDFILE="$NAME"-phantom.pid
LOGFILE="$NAME".log
PHPNAME="php webserver"
PJSNAME="phantomjs"

validate_server () {
  which php &> /dev/null
  if [[ $? -eq 1 ]]; then
    printf "${YELLOW}Error: PHP not found. ${NORMAL}Please install PHP version 5.4 or greater!\n"
    return 1
  fi

  php -h | grep -q -- '-S'
  if [[ $? -eq 1 ]]; then
    printf "${YELLOW}Error: PHP version must be 5.4 or greater!${NORMAL}\n"
    return 1
  fi

  return 0
}

start_server () {

  validate_server
  if [[ $? -eq 1 ]]; then
    return 1
  fi

  if [[ -e "$PIDFILE" ]]; then
    printf "${YELLOW}Server seems to be running!${NORMAL}\n"
    echo
    echo if not, there is probably a zombie "$PIDFILE" in this directory.
    echo if you are sure no server is running just remove "$PIDFILE" manually and start again
    return 1
  else
    printf "${GREEN}$PHPNAME started on $HOST:$PORT${NORMAL} for $WP_PATH\n"
    php -S "$HOST":"$PORT" -t $WP_PATH >> "$LOGFILE" 2>&1 &
    echo "$HOST":"$PORT":$! > $PIDFILE
    #Start up the webdriver
    echo "${GREEN}Started PhantomJS webdriver"
    phantomjs --webdriver=4444 >> "$LOGFILE" 2>&1 &
    echo "$PORT":$! > $PHANTOMPIDFILE
    return 0
  fi
}

read_pidfile() {
  if [[ -e "$PIDFILE" ]]; then
    PIDFILECONTENT=`cat "$PIDFILE"`
    IFS=: read HOST PORT PID <<< "$PIDFILECONTENT:"
    return 0
  else
    return 1
  fi
}

read_phantom_pidfile() {
    if [[ -e "$PHANTOMPIDFILE" ]]; then
        PIDFILECONTENT=`cat "$PHANTOMPIDFILE"`
        IFS=: read PORT PID <<< "$PIDFILECONTENT:"
        return 0
    else
        return 1
    fi
}


stop_server () {
  if read_pidfile; then
    kill -9 "$PID"
    rm -f "$PIDFILE"
    printf "${GREEN}$PHPNAME stopped!${NORMAL}\n"
  else
    printf "${YELLOW}$PHPNAME is not running!${NORMAL}\n"
  fi

  #phantomjs
  if read_phantom_pidfile; then
    kill -9 "$PID"
    rm -f "$PHANTOMPIDFILE"
    printf "${GREEN}$PJSNAME stopped!${NORMAL}\n"
    return 0
  else
    printf "${YELLOW}$PJSNAME is not running!${NORMAL}\n"
    return 1
  fi
}

status_server() {
  if read_pidfile && kill -0 "$PID" ; then
    printf "${BLUE}$PHPNAME is running on ${HOST}:${PORT}${NORMAL}\n"
  else
    printf "${YELLOW}$PHPNAME is not running!${NORMAL}\n"
  fi
  if read_phantom_pidfile && kill -0 "$PID" ; then
    printf "${BLUE}$PJSNAME is running on ${PORT}${NORMAL}\n"
  else
    printf "${YELLOW}$PJSNAME is not running!${NORMAL}\n"
  fi
}


setup_colors

case $1 in
  start) start_server;;
  stop)  stop_server;;
  restart) stop_server; start_server ;;
  status) status_server;;
  log) log_server;;
  -h) usage ;;
  --help) usage ;;
  *) usage;;
esac
